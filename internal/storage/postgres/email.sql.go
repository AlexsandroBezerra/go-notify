// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmail = `-- name: CreateEmail :one
INSERT INTO emails (recipient, subject, body, priority, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateEmailParams struct {
	Recipient string
	Subject   string
	Body      string
	Priority  int16
	Status    DeliveryStatus
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createEmail,
		arg.Recipient,
		arg.Subject,
		arg.Body,
		arg.Priority,
		arg.Status,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const listEmails = `-- name: ListEmails :many
SELECT id, recipient, subject, body, priority, status, created_at
FROM emails
ORDER BY emails.created_at DESC
`

func (q *Queries) ListEmails(ctx context.Context) ([]Email, error) {
	rows, err := q.db.Query(ctx, listEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Email
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.Recipient,
			&i.Subject,
			&i.Body,
			&i.Priority,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
