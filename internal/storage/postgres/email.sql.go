// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmail = `-- name: CreateEmail :exec
INSERT INTO emails (id, recipient, subject, body, priority)
VALUES ($1, $2, $3, $4, $5)
`

type CreateEmailParams struct {
	ID        pgtype.UUID
	Recipient string
	Subject   string
	Body      string
	Priority  int16
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) error {
	_, err := q.db.Exec(ctx, createEmail,
		arg.ID,
		arg.Recipient,
		arg.Subject,
		arg.Body,
		arg.Priority,
	)
	return err
}

const listEmails = `-- name: ListEmails :many
SELECT e.id, e.recipient, e.subject, e.body, e.priority, e.created_at
FROM emails e
ORDER BY e.created_at DESC
`

func (q *Queries) ListEmails(ctx context.Context) ([]Email, error) {
	rows, err := q.db.Query(ctx, listEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Email
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.Recipient,
			&i.Subject,
			&i.Body,
			&i.Priority,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
