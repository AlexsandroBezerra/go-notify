// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_status.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmailStatus = `-- name: CreateEmailStatus :exec
INSERT INTO email_status (id, email_id, status)
VALUES ($1, $2, $3)
`

type CreateEmailStatusParams struct {
	ID      pgtype.UUID
	EmailID pgtype.UUID
	Status  DeliveryStatus
}

func (q *Queries) CreateEmailStatus(ctx context.Context, arg CreateEmailStatusParams) error {
	_, err := q.db.Exec(ctx, createEmailStatus, arg.ID, arg.EmailID, arg.Status)
	return err
}

const getByEmailId = `-- name: GetByEmailId :many
SELECT id, email_id, status, created_at
FROM email_status
WHERE status = ($1)
ORDER BY created_at
`

func (q *Queries) GetByEmailId(ctx context.Context, status DeliveryStatus) ([]EmailStatus, error) {
	rows, err := q.db.Query(ctx, getByEmailId, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmailStatus
	for rows.Next() {
		var i EmailStatus
		if err := rows.Scan(
			&i.ID,
			&i.EmailID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastByEmailId = `-- name: GetLastByEmailId :one
SELECT id, email_id, status, created_at
FROM email_status
WHERE status = ($1)
LIMIT 1
`

func (q *Queries) GetLastByEmailId(ctx context.Context, status DeliveryStatus) (EmailStatus, error) {
	row := q.db.QueryRow(ctx, getLastByEmailId, status)
	var i EmailStatus
	err := row.Scan(
		&i.ID,
		&i.EmailID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
